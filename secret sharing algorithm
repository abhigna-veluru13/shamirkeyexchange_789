import org.json.JSONObject;
import java.nio.file.*;
import java.util.*;

public class ShamirSecretSharing {

    public static void main(String[] args) throws Exception {
        JSONObject jsonObject = readJsonFile("testcase2.json");
        int n = jsonObject.getJSONObject("keys").getInt("n");
        int k = jsonObject.getJSONObject("keys").getInt("k");
        Map<Integer, Long> points = new HashMap<>();

        for (int i = 1; i <= n; i++) {
            if (jsonObject.has(String.valueOf(i))) {
                JSONObject root = jsonObject.getJSONObject(String.valueOf(i));
                int base = root.getInt("base");
                String value = root.getString("value");
                long decodedValue = Long.parseLong(value, base);
                points.put(i, decodedValue);
            }
        }

        long secret = calculateSecret(points, n);
        System.out.println("Secret (Test Case 2): " + secret);
        findWrongPoints(points, secret);
    }

    private static JSONObject readJsonFile(String filePath) throws Exception {
        String content = new String(Files.readAllBytes(Paths.get(filePath)));
        return new JSONObject(content);
    }

    private static long calculateSecret(Map<Integer, Long> points, int n) {
        long secret = 0;
        for (Map.Entry<Integer, Long> entry : points.entrySet()) {
            int x = entry.getKey();
            long y = entry.getValue();
            long numerator = 1, denominator = 1;

            for (int j = 1; j <= n; j++) {
                if (j != x) {
                    numerator *= (0 - j);
                    denominator *= (x - j);
                }
            }
            secret += (y * numerator / denominator);
        }
        return secret;
    }

    private static void findWrongPoints(Map<Integer, Long> points, long secret) {
        List<String> wrongPoints = new ArrayList<>();
        for (Map.Entry<Integer, Long> entry : points.entrySet()) {
            int x = entry.getKey();
            long y = entry.getValue();
            long expectedY = secret; // Assuming constant term as y

            if (y != expectedY) {
                wrongPoints.add("x = " + x + ", y (wrong): " + y);
            }
        }

        if (!wrongPoints.isEmpty()) {
            System.out.println("Wrong Points (Test Case 2):");
            for (String point : wrongPoints) {
                System.out.println(point);
            }
        } else {
            System.out.println("No wrong points found in Test Case 2");
        }
    }
}
